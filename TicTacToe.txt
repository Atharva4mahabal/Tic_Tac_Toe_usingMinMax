import random

# Function to print the Tic Tac Toe board
def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 9)

# Function to check if the game is over
def game_over(board):
    for row in board:
        if row.count(row[0]) == 3 and row[0] != " ":
            return True
    for col in range(3):
        check = [board[row][col] for row in range(3)]
        if check.count(check[0]) == 3 and check[0] != " ":
            return True
    if board[0][0] == board[1][1] == board[2][2] != " ":
        return True
    if board[0][2] == board[1][1] == board[2][0] != " ":
        return True
    return False

# Function to check if the board is full
def board_full(board):
    for row in board:
        if " " in row:
            return False
    return True

# Function to evaluate the board for the Minimax algorithm
def evaluate_board(board):
    for row in board:
        if row.count("X") == 3:
            return 1
        elif row.count("O") == 3:
            return -1
    for col in range(3):
        check = [board[row][col] for row in range(3)]
        if check.count("X") == 3:
            return 1
        elif check.count("O") == 3:
            return -1
    if board[0][0] == board[1][1] == board[2][2] == "X":
        return 1
    elif board[0][0] == board[1][1] == board[2][2] == "O":
        return -1
    if board[0][2] == board[1][1] == board[2][0] == "X":
        return 1
    elif board[0][2] == board[1][1] == board[2][0] == "O":
        return -1
    return 0

# Minimax algorithm
def minimax(board, depth, maximizing_player):
    if game_over(board):
        return evaluate_board(board)
   
    if board_full(board):
        return 0
   
    if maximizing_player:
        max_eval = float('-inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == " ":
                    board[i][j] = "X"
                    eval = minimax(board, depth + 1, False)
                    board[i][j] = " "
                    max_eval = max(max_eval, eval)
        return max_eval
    else:
        min_eval = float('inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == " ":
                    board[i][j] = "O"
                    eval = minimax(board, depth + 1, True)
                    board[i][j] = " "
                    min_eval = min(min_eval, eval)
        return min_eval

# Function to find the best move using Minimax
def find_best_move(board):
    best_eval = float('-inf')
    best_move = None
    for i in range(3):
        for j in range(3):
            if board[i][j] == " ":
                board[i][j] = "X"
                eval = minimax(board, 0, False)
                board[i][j] = " "
                if eval > best_eval:
                    best_eval = eval
                    best_move = (i, j)
    return best_move

# Main game loop
board = [[" " for _ in range(3)] for _ in range(3)]
player_turn = True

print("Tic Tac Toe - You are 'O' and the computer is 'X'.")
print_board(board)

while not game_over(board) and not board_full(board):
    if player_turn:
        row, col = map(int, input("Enter your move (row and column): ").split())
        if board[row][col] == " ":
            board[row][col] = "O"
            player_turn = False
        else:
            print("Invalid move. Try again.")
    else:
        print("Computer's turn:")
        row, col = find_best_move(board)
        board[row][col] = "X"
        player_turn = True
    print_board(board)

if evaluate_board(board) == 1:
    print("Congratulations! You win!")
elif evaluate_board(board) == -1:
    print("Sorry, the computer wins.")
else:
    print("It's a draw!")
